name: Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-CU14-ubuntu-22.04
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Interfac1ng!2024
        ports:
          - 1433:1433
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping | grep PONG || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 15

    env:
      DOTNET_VERSION: |
        9.0.x
        8.0.x
      SA_PASSWORD: Interfac1ng!2024
      CONNECTIONSTRINGS__DEFAULTCONNECTION: "Server=localhost,1433;User ID=sa;Password=Interfac1ng!2024;TrustServerCertificate=True;Encrypt=True;"
      ASPNETCORE_ENVIRONMENT: Development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (8 & 9)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install sqlcmd (mssql-tools18)
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
          curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
            # ACCEPT_EULA required
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 unixodbc-dev
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore .NET
        run: dotnet restore RegulaFlow.AuditSaaS.sln

      - name: Build .NET
        run: dotnet build RegulaFlow.AuditSaaS.sln --configuration Release --no-restore /warnaserror

      - name: Run Unit Tests
        run: dotnet test tests/UnitTests/UnitTests.csproj --configuration Release --no-build --logger "trx;LogFileName=unit_tests.trx"

      - name: Ensure DB Ready (extra guard)
        shell: bash
        run: |
          for i in {1..30}; do
            if command -v sqlcmd >/dev/null 2>&1; then
              if sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -Q "SELECT 1" >/dev/null 2>&1; then
                echo "SQL ready"
                exit 0
              fi
            else
              # Fallback: raw TCP probe
              if (echo > /dev/tcp/localhost/1433) >/dev/null 2>&1; then
                echo "Port 1433 open (no sqlcmd available)"
                exit 0
              fi
            fi
            echo "Waiting for SQL..."
            sleep 2
          done
          echo "SQL never became ready" >&2
          exit 1

      - name: Frontend dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Build Frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Launch API (background)
        shell: bash
        run: |
          dotnet publish src/AuditService/AuditService.csproj -c Release -o out
          (cd out && dotnet AuditService.dll &) 
          for i in {1..40}; do
            if curl -sf http://localhost:5000/swagger/v1/swagger.json >/dev/null 2>&1 || \
               curl -sf http://localhost:5000/api/audit >/dev/null 2>&1; then
              echo "API ready"
              exit 0
            fi
            echo "Waiting for API..."
            sleep 2
          done
          echo "API failed to become ready" >&2
          exit 1

      - name: Run Integration Tests
        run: dotnet test tests/IntegrationTests/IntegrationTests.csproj --configuration Release --no-build --logger "trx;LogFileName=integration_tests.trx"

      - name: Summary
        run: echo "All tests passed"
