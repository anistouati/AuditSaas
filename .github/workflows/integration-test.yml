name: Integration Tests

on:
  workflow_dispatch:

jobs:
  integration:
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-CU14-ubuntu-22.04
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Interfac1ng!2024
        ports:
          - 1433:1433
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping" --health-interval 10s --health-timeout 5s --health-retries 10
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping | grep PONG || exit 1" --health-interval 5s --health-timeout 3s --health-retries 20

    env:
      ASPNETCORE_ENVIRONMENT: Development
      SA_PASSWORD: Interfac1ng!2024
      CONNECTIONSTRINGS__DEFAULTCONNECTION: "Server=localhost,1433;User ID=sa;Password=Interfac1ng!2024;TrustServerCertificate=True;Encrypt=True;"
      RABBITMQ_HOST: localhost

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (9 & 8)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      - name: Wait for SQL (port probe)
        shell: bash
        run: |
          echo "Waiting for SQL Server to become healthy..."
          for i in {1..60}; do
            if (echo > /dev/tcp/localhost/1433) >/dev/null 2>&1; then
              echo "Port 1433 open (attempt $i)"; break;
            fi
            sleep 2
            if [ "$i" -eq 60 ]; then echo "SQL did not become ready"; exit 1; fi
          done

      - name: Restore
        run: dotnet restore RegulaFlow.AuditSaaS.sln

      - name: Build
        run: dotnet build RegulaFlow.AuditSaaS.sln --no-restore --configuration Release

      - name: Enable memory overcommit (Redis recommendation)
        shell: bash
        run: |
          sudo sysctl -w vm.overcommit_memory=1
          sysctl vm.overcommit_memory

      - name: Wait for Redis
        shell: bash
        run: |
          for i in {1..40}; do
            if (echo > /dev/tcp/localhost/6379) >/dev/null 2>&1; then
              echo "Redis TCP port open (attempt $i)"; break;
            fi
            sleep 2
            if [ "$i" -eq 40 ]; then echo "Redis not reachable" >&2; exit 1; fi
          done

      - name: Launch API (background)
        shell: bash
        run: |
          dotnet publish src/AuditService/AuditService.csproj -c Release -o apiout
          (cd apiout && ASPNETCORE_URLS=http://localhost:5000 dotnet AuditService.dll &) 
          for i in {1..50}; do
            if curl -sf http://localhost:5000/swagger/v1/swagger.json >/dev/null 2>&1; then
              echo "API ready (swagger)"; break;
            fi
            if curl -sf http://localhost:5000/api/audit >/dev/null 2>&1; then
              echo "API ready (endpoint)"; break;
            fi
            sleep 2
            if [ "$i" -eq 50 ]; then echo "API failed to become ready" >&2; exit 1; fi
          done

      - name: Check RabbitMQ (optional)
        shell: bash
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:15672 >/dev/null 2>&1; then echo "RabbitMQ management UI reachable"; break; fi
            sleep 2
            if [ "$i" -eq 30 ]; then echo "RabbitMQ not reachable (continuing anyway)" >&2; fi
          done

      - name: Run Integration Tests
        run: dotnet test tests/IntegrationTests/IntegrationTests.csproj --no-build --configuration Release --logger 'trx;LogFileName=integration.trx'

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: '**/integration.trx'
